<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="  
           http://www.springframework.org/schema/beans  
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
           http://www.springframework.org/schema/aop  
           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/context  
           http://www.springframework.org/schema/context/spring-context-3.0.xsd">
     
     <!-- 引入jdbc配置文件 -->  
     <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
               <value>classpath:properties/*.properties</value>
                <!--要是有多个配置文件，只需在这里继续添加即可 -->
            </list>
        </property>
    </bean>
    
	 <!-- 配置数据源 -->  
    <bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">  
        <property name="dbType" value="${dbType}"></property>  
        <property name="url" value="${sqlServer.url}" />  
        <property name="driverClassName" value="${sqlServer.driverClassName}"></property>  
        <property name="username" value="${sqlServer.username}" />  
        <property name="password" value="${sqlServer.password}" />  
        <property name="initialSize" value="1" />  
        <property name="maxActive" value="20" />  
        <property name="minIdle" value="10" />  
        <property name="maxWait" value="60000" />  
        <!--<property name="poolPreparedStatements" value="false"></property>  
        <property name="maxOpenPreparedStatements" value="20"></property> -->  
        <property name="testOnBorrow" value="false" />  
        <property name="testOnReturn" value="false" />  
        <property name="testWhileIdle" value="true" />  
        <property name="timeBetweenEvictionRunsMillis" value="60000" />  
        <property name="minEvictableIdleTimeMillis" value="25200000" />  
        <property name="removeAbandoned" value="true" />  
        <property name="removeAbandonedTimeout" value="1800" />  
        <property name="logAbandoned" value="true" />  
        <!-- 配置监控统计拦截的filters,配置log4j可以打印出Parameters   --> 
        <property name="filters" value="log4j" /> 
     </bean>

	<!-- 自动扫描了所有的XxxxMapper.xml对应的mapper接口文件，这样就不用一个一个手动配置Mpper的映射了，只要Mapper接口类和Mapper映射文件对应起来就可以了。 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage"
			value="com.zhangye.room.rent.server.dao" />
	</bean>

    <!-- 配置Mybatis的文件 ，mapperLocations配置**Mapper.xml文件位置，configLocation配置mybatis-config文件位置-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>  
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
		<!-- <property name="typeAliasesPackage" value="com.tiantian.ckeditor.model" 
			/> -->
	</bean>

	<!-- 自动扫描注解的bean -->
	<context:component-scan base-package="com.zhangye.room.rent.server.service" />

</beans>
